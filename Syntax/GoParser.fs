// Implementation file for parser generated by fsyacc
module GoParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "GoParser.fsy"


# 9 "GoParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | MUL
  | DIV
  | PLUS
  | MINUS
  | LT
  | GT
  | LTEQ
  | GTEQ
  | EQEQ
  | NEQ
  | OR
  | AND
  | BANG
  | QUESTION
  | HASH
  | PERCENT
  | LBRACKET
  | RBRACKET
  | LCURLY
  | RCURLY
  | LPAREN
  | RPAREN
  | EQ
  | COMMA
  | SEMI
  | COLON
  | DOT
  | OP_PLUSEQ
  | OP_ELLIPSIS
  | CONTINUE
  | FOR
  | IMPORT
  | RETURN
  | VAR
  | CONST
  | FALLTHROUGH
  | IF
  | RANGE
  | TYPE
  | CHAN
  | ELSE
  | GOTO
  | PACKAGE
  | SWITCH
  | CASE
  | DEFER
  | GO
  | MAP
  | STRUCT
  | BREAK
  | DEFAULT
  | FUNC
  | INTERFACE
  | SELECT
  | STRING_LITERAL of (string)
  | RUNE_LITERAL of (char)
  | FLOATING_LITERAL of (float)
  | INTEGER_LITERAL of (int)
  | IDENTIFIER of (string)
  | TYPE_IDENTIFIER of (string)
  | PACKAGE_IDENTIFIER of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LTEQ
    | TOKEN_GTEQ
    | TOKEN_EQEQ
    | TOKEN_NEQ
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_BANG
    | TOKEN_QUESTION
    | TOKEN_HASH
    | TOKEN_PERCENT
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_EQ
    | TOKEN_COMMA
    | TOKEN_SEMI
    | TOKEN_COLON
    | TOKEN_DOT
    | TOKEN_OP_PLUSEQ
    | TOKEN_OP_ELLIPSIS
    | TOKEN_CONTINUE
    | TOKEN_FOR
    | TOKEN_IMPORT
    | TOKEN_RETURN
    | TOKEN_VAR
    | TOKEN_CONST
    | TOKEN_FALLTHROUGH
    | TOKEN_IF
    | TOKEN_RANGE
    | TOKEN_TYPE
    | TOKEN_CHAN
    | TOKEN_ELSE
    | TOKEN_GOTO
    | TOKEN_PACKAGE
    | TOKEN_SWITCH
    | TOKEN_CASE
    | TOKEN_DEFER
    | TOKEN_GO
    | TOKEN_MAP
    | TOKEN_STRUCT
    | TOKEN_BREAK
    | TOKEN_DEFAULT
    | TOKEN_FUNC
    | TOKEN_INTERFACE
    | TOKEN_SELECT
    | TOKEN_STRING_LITERAL
    | TOKEN_RUNE_LITERAL
    | TOKEN_FLOATING_LITERAL
    | TOKEN_INTEGER_LITERAL
    | TOKEN_IDENTIFIER
    | TOKEN_TYPE_IDENTIFIER
    | TOKEN_PACKAGE_IDENTIFIER
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startsource_file
    | NONTERM_source_file
    | NONTERM_package_clause
    | NONTERM_import_decl_list
    | NONTERM_import_decl
    | NONTERM_import_spec_list
    | NONTERM_import_spec
    | NONTERM_import_path
    | NONTERM_package_name_list
    | NONTERM_package_name
    | NONTERM_top_level_decl_list
    | NONTERM_top_level_decl
    | NONTERM_function_decl
    | NONTERM_function_body
    | NONTERM_function_signature
    | NONTERM_result
    | NONTERM_parameters
    | NONTERM_parameter_list
    | NONTERM_parameter_decl
    | NONTERM_identifier_list
    | NONTERM_block
    | NONTERM_statement_list
    | NONTERM_statement
    | NONTERM_simple_stmt
    | NONTERM_expression_stmt
    | NONTERM_expression
    | NONTERM_unary_expr
    | NONTERM_primary_expr
    | NONTERM_operand
    | NONTERM_operand_name
    | NONTERM_qualified_ident
    | NONTERM_literal
    | NONTERM_basic_literal
    | NONTERM_selector
    | NONTERM_arguments
    | NONTERM_inner_arguments
    | NONTERM_expression_list
    | NONTERM_type
    | NONTERM_type_name

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | MUL  -> 0 
  | DIV  -> 1 
  | PLUS  -> 2 
  | MINUS  -> 3 
  | LT  -> 4 
  | GT  -> 5 
  | LTEQ  -> 6 
  | GTEQ  -> 7 
  | EQEQ  -> 8 
  | NEQ  -> 9 
  | OR  -> 10 
  | AND  -> 11 
  | BANG  -> 12 
  | QUESTION  -> 13 
  | HASH  -> 14 
  | PERCENT  -> 15 
  | LBRACKET  -> 16 
  | RBRACKET  -> 17 
  | LCURLY  -> 18 
  | RCURLY  -> 19 
  | LPAREN  -> 20 
  | RPAREN  -> 21 
  | EQ  -> 22 
  | COMMA  -> 23 
  | SEMI  -> 24 
  | COLON  -> 25 
  | DOT  -> 26 
  | OP_PLUSEQ  -> 27 
  | OP_ELLIPSIS  -> 28 
  | CONTINUE  -> 29 
  | FOR  -> 30 
  | IMPORT  -> 31 
  | RETURN  -> 32 
  | VAR  -> 33 
  | CONST  -> 34 
  | FALLTHROUGH  -> 35 
  | IF  -> 36 
  | RANGE  -> 37 
  | TYPE  -> 38 
  | CHAN  -> 39 
  | ELSE  -> 40 
  | GOTO  -> 41 
  | PACKAGE  -> 42 
  | SWITCH  -> 43 
  | CASE  -> 44 
  | DEFER  -> 45 
  | GO  -> 46 
  | MAP  -> 47 
  | STRUCT  -> 48 
  | BREAK  -> 49 
  | DEFAULT  -> 50 
  | FUNC  -> 51 
  | INTERFACE  -> 52 
  | SELECT  -> 53 
  | STRING_LITERAL _ -> 54 
  | RUNE_LITERAL _ -> 55 
  | FLOATING_LITERAL _ -> 56 
  | INTEGER_LITERAL _ -> 57 
  | IDENTIFIER _ -> 58 
  | TYPE_IDENTIFIER _ -> 59 
  | PACKAGE_IDENTIFIER _ -> 60 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_MUL 
  | 1 -> TOKEN_DIV 
  | 2 -> TOKEN_PLUS 
  | 3 -> TOKEN_MINUS 
  | 4 -> TOKEN_LT 
  | 5 -> TOKEN_GT 
  | 6 -> TOKEN_LTEQ 
  | 7 -> TOKEN_GTEQ 
  | 8 -> TOKEN_EQEQ 
  | 9 -> TOKEN_NEQ 
  | 10 -> TOKEN_OR 
  | 11 -> TOKEN_AND 
  | 12 -> TOKEN_BANG 
  | 13 -> TOKEN_QUESTION 
  | 14 -> TOKEN_HASH 
  | 15 -> TOKEN_PERCENT 
  | 16 -> TOKEN_LBRACKET 
  | 17 -> TOKEN_RBRACKET 
  | 18 -> TOKEN_LCURLY 
  | 19 -> TOKEN_RCURLY 
  | 20 -> TOKEN_LPAREN 
  | 21 -> TOKEN_RPAREN 
  | 22 -> TOKEN_EQ 
  | 23 -> TOKEN_COMMA 
  | 24 -> TOKEN_SEMI 
  | 25 -> TOKEN_COLON 
  | 26 -> TOKEN_DOT 
  | 27 -> TOKEN_OP_PLUSEQ 
  | 28 -> TOKEN_OP_ELLIPSIS 
  | 29 -> TOKEN_CONTINUE 
  | 30 -> TOKEN_FOR 
  | 31 -> TOKEN_IMPORT 
  | 32 -> TOKEN_RETURN 
  | 33 -> TOKEN_VAR 
  | 34 -> TOKEN_CONST 
  | 35 -> TOKEN_FALLTHROUGH 
  | 36 -> TOKEN_IF 
  | 37 -> TOKEN_RANGE 
  | 38 -> TOKEN_TYPE 
  | 39 -> TOKEN_CHAN 
  | 40 -> TOKEN_ELSE 
  | 41 -> TOKEN_GOTO 
  | 42 -> TOKEN_PACKAGE 
  | 43 -> TOKEN_SWITCH 
  | 44 -> TOKEN_CASE 
  | 45 -> TOKEN_DEFER 
  | 46 -> TOKEN_GO 
  | 47 -> TOKEN_MAP 
  | 48 -> TOKEN_STRUCT 
  | 49 -> TOKEN_BREAK 
  | 50 -> TOKEN_DEFAULT 
  | 51 -> TOKEN_FUNC 
  | 52 -> TOKEN_INTERFACE 
  | 53 -> TOKEN_SELECT 
  | 54 -> TOKEN_STRING_LITERAL 
  | 55 -> TOKEN_RUNE_LITERAL 
  | 56 -> TOKEN_FLOATING_LITERAL 
  | 57 -> TOKEN_INTEGER_LITERAL 
  | 58 -> TOKEN_IDENTIFIER 
  | 59 -> TOKEN_TYPE_IDENTIFIER 
  | 60 -> TOKEN_PACKAGE_IDENTIFIER 
  | 63 -> TOKEN_end_of_input
  | 61 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startsource_file 
    | 1 -> NONTERM_source_file 
    | 2 -> NONTERM_package_clause 
    | 3 -> NONTERM_import_decl_list 
    | 4 -> NONTERM_import_decl_list 
    | 5 -> NONTERM_import_decl 
    | 6 -> NONTERM_import_decl 
    | 7 -> NONTERM_import_spec_list 
    | 8 -> NONTERM_import_spec_list 
    | 9 -> NONTERM_import_spec 
    | 10 -> NONTERM_import_spec 
    | 11 -> NONTERM_import_path 
    | 12 -> NONTERM_package_name_list 
    | 13 -> NONTERM_package_name_list 
    | 14 -> NONTERM_package_name 
    | 15 -> NONTERM_top_level_decl_list 
    | 16 -> NONTERM_top_level_decl_list 
    | 17 -> NONTERM_top_level_decl 
    | 18 -> NONTERM_function_decl 
    | 19 -> NONTERM_function_decl 
    | 20 -> NONTERM_function_body 
    | 21 -> NONTERM_function_signature 
    | 22 -> NONTERM_function_signature 
    | 23 -> NONTERM_result 
    | 24 -> NONTERM_result 
    | 25 -> NONTERM_parameters 
    | 26 -> NONTERM_parameters 
    | 27 -> NONTERM_parameter_list 
    | 28 -> NONTERM_parameter_list 
    | 29 -> NONTERM_parameter_decl 
    | 30 -> NONTERM_parameter_decl 
    | 31 -> NONTERM_parameter_decl 
    | 32 -> NONTERM_identifier_list 
    | 33 -> NONTERM_identifier_list 
    | 34 -> NONTERM_block 
    | 35 -> NONTERM_block 
    | 36 -> NONTERM_statement_list 
    | 37 -> NONTERM_statement_list 
    | 38 -> NONTERM_statement 
    | 39 -> NONTERM_simple_stmt 
    | 40 -> NONTERM_expression_stmt 
    | 41 -> NONTERM_expression 
    | 42 -> NONTERM_unary_expr 
    | 43 -> NONTERM_primary_expr 
    | 44 -> NONTERM_primary_expr 
    | 45 -> NONTERM_primary_expr 
    | 46 -> NONTERM_operand 
    | 47 -> NONTERM_operand 
    | 48 -> NONTERM_operand_name 
    | 49 -> NONTERM_operand_name 
    | 50 -> NONTERM_qualified_ident 
    | 51 -> NONTERM_literal 
    | 52 -> NONTERM_basic_literal 
    | 53 -> NONTERM_selector 
    | 54 -> NONTERM_arguments 
    | 55 -> NONTERM_arguments 
    | 56 -> NONTERM_inner_arguments 
    | 57 -> NONTERM_expression_list 
    | 58 -> NONTERM_expression_list 
    | 59 -> NONTERM_type 
    | 60 -> NONTERM_type_name 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 63 
let _fsyacc_tagOfErrorTerminal = 61

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | MUL  -> "MUL" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | LTEQ  -> "LTEQ" 
  | GTEQ  -> "GTEQ" 
  | EQEQ  -> "EQEQ" 
  | NEQ  -> "NEQ" 
  | OR  -> "OR" 
  | AND  -> "AND" 
  | BANG  -> "BANG" 
  | QUESTION  -> "QUESTION" 
  | HASH  -> "HASH" 
  | PERCENT  -> "PERCENT" 
  | LBRACKET  -> "LBRACKET" 
  | RBRACKET  -> "RBRACKET" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | EQ  -> "EQ" 
  | COMMA  -> "COMMA" 
  | SEMI  -> "SEMI" 
  | COLON  -> "COLON" 
  | DOT  -> "DOT" 
  | OP_PLUSEQ  -> "OP_PLUSEQ" 
  | OP_ELLIPSIS  -> "OP_ELLIPSIS" 
  | CONTINUE  -> "CONTINUE" 
  | FOR  -> "FOR" 
  | IMPORT  -> "IMPORT" 
  | RETURN  -> "RETURN" 
  | VAR  -> "VAR" 
  | CONST  -> "CONST" 
  | FALLTHROUGH  -> "FALLTHROUGH" 
  | IF  -> "IF" 
  | RANGE  -> "RANGE" 
  | TYPE  -> "TYPE" 
  | CHAN  -> "CHAN" 
  | ELSE  -> "ELSE" 
  | GOTO  -> "GOTO" 
  | PACKAGE  -> "PACKAGE" 
  | SWITCH  -> "SWITCH" 
  | CASE  -> "CASE" 
  | DEFER  -> "DEFER" 
  | GO  -> "GO" 
  | MAP  -> "MAP" 
  | STRUCT  -> "STRUCT" 
  | BREAK  -> "BREAK" 
  | DEFAULT  -> "DEFAULT" 
  | FUNC  -> "FUNC" 
  | INTERFACE  -> "INTERFACE" 
  | SELECT  -> "SELECT" 
  | STRING_LITERAL _ -> "STRING_LITERAL" 
  | RUNE_LITERAL _ -> "RUNE_LITERAL" 
  | FLOATING_LITERAL _ -> "FLOATING_LITERAL" 
  | INTEGER_LITERAL _ -> "INTEGER_LITERAL" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | TYPE_IDENTIFIER _ -> "TYPE_IDENTIFIER" 
  | PACKAGE_IDENTIFIER _ -> "PACKAGE_IDENTIFIER" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | MUL  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LTEQ  -> (null : System.Object) 
  | GTEQ  -> (null : System.Object) 
  | EQEQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | BANG  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | HASH  -> (null : System.Object) 
  | PERCENT  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | OP_PLUSEQ  -> (null : System.Object) 
  | OP_ELLIPSIS  -> (null : System.Object) 
  | CONTINUE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | IMPORT  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | CONST  -> (null : System.Object) 
  | FALLTHROUGH  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | RANGE  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | CHAN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | GOTO  -> (null : System.Object) 
  | PACKAGE  -> (null : System.Object) 
  | SWITCH  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | DEFER  -> (null : System.Object) 
  | GO  -> (null : System.Object) 
  | MAP  -> (null : System.Object) 
  | STRUCT  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | DEFAULT  -> (null : System.Object) 
  | FUNC  -> (null : System.Object) 
  | INTERFACE  -> (null : System.Object) 
  | SELECT  -> (null : System.Object) 
  | STRING_LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RUNE_LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOATING_LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INTEGER_LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TYPE_IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PACKAGE_IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 2us; 3us; 2us; 65535us; 2us; 7us; 3us; 8us; 1us; 65535us; 11us; 12us; 3us; 65535us; 9us; 10us; 11us; 14us; 15us; 16us; 4us; 65535us; 9us; 19us; 11us; 19us; 15us; 19us; 17us; 18us; 3us; 65535us; 9us; 17us; 11us; 17us; 15us; 17us; 8us; 65535us; 9us; 21us; 11us; 21us; 15us; 21us; 22us; 23us; 52us; 71us; 57us; 71us; 78us; 71us; 84us; 71us; 1us; 65535us; 3us; 4us; 2us; 65535us; 3us; 25us; 4us; 26us; 2us; 65535us; 3us; 27us; 4us; 27us; 1us; 65535us; 30us; 31us; 1us; 65535us; 29us; 30us; 1us; 65535us; 33us; 34us; 2us; 65535us; 29us; 33us; 33us; 35us; 1us; 65535us; 37us; 38us; 2us; 65535us; 37us; 41us; 42us; 43us; 2us; 65535us; 37us; 44us; 42us; 44us; 1us; 65535us; 30us; 32us; 1us; 65535us; 52us; 53us; 2us; 65535us; 52us; 56us; 57us; 58us; 2us; 65535us; 52us; 59us; 57us; 59us; 2us; 65535us; 52us; 60us; 57us; 60us; 4us; 65535us; 52us; 61us; 57us; 61us; 78us; 83us; 84us; 85us; 4us; 65535us; 52us; 62us; 57us; 62us; 78us; 62us; 84us; 62us; 4us; 65535us; 52us; 63us; 57us; 63us; 78us; 63us; 84us; 63us; 4us; 65535us; 52us; 66us; 57us; 66us; 78us; 66us; 84us; 66us; 4us; 65535us; 52us; 68us; 57us; 68us; 78us; 68us; 84us; 68us; 4us; 65535us; 52us; 70us; 57us; 70us; 78us; 70us; 84us; 70us; 4us; 65535us; 52us; 67us; 57us; 67us; 78us; 67us; 84us; 67us; 4us; 65535us; 52us; 74us; 57us; 74us; 78us; 74us; 84us; 74us; 1us; 65535us; 63us; 65us; 1us; 65535us; 63us; 64us; 1us; 65535us; 78us; 79us; 1us; 65535us; 78us; 82us; 5us; 65535us; 33us; 36us; 37us; 48us; 42us; 48us; 44us; 47us; 45us; 46us; 5us; 65535us; 33us; 86us; 37us; 86us; 42us; 86us; 44us; 86us; 45us; 86us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 10us; 12us; 16us; 21us; 25us; 34us; 36us; 39us; 42us; 44us; 46us; 48us; 51us; 53us; 56us; 59us; 61us; 63us; 66us; 69us; 72us; 77us; 82us; 87us; 92us; 97us; 102us; 107us; 112us; 114us; 116us; 118us; 120us; 126us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 1us; 4us; 2us; 1us; 16us; 1us; 2us; 1us; 2us; 1us; 3us; 1us; 4us; 2us; 5us; 6us; 1us; 5us; 1us; 6us; 2us; 6us; 8us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 8us; 2us; 9us; 13us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 2us; 18us; 19us; 2us; 18us; 19us; 2us; 18us; 19us; 1us; 18us; 1us; 20us; 2us; 21us; 22us; 1us; 21us; 1us; 23us; 1us; 24us; 2us; 25us; 26us; 2us; 25us; 28us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 28us; 3us; 29us; 30us; 33us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 33us; 2us; 34us; 35us; 2us; 34us; 37us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 3us; 42us; 43us; 44us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 50us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 53us; 2us; 54us; 55us; 1us; 54us; 1us; 54us; 1us; 55us; 2us; 56us; 58us; 1us; 57us; 1us; 58us; 1us; 58us; 1us; 59us; 1us; 60us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 12us; 14us; 16us; 18us; 20us; 23us; 25us; 27us; 30us; 32us; 34us; 36us; 38us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 64us; 67us; 70us; 72us; 74us; 77us; 79us; 81us; 83us; 86us; 89us; 91us; 93us; 95us; 97us; 99us; 103us; 105us; 107us; 109us; 111us; 113us; 115us; 117us; 120us; 123us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; 145us; 147us; 149us; 151us; 153us; 155us; 157us; 159us; 161us; 163us; 165us; 167us; 169us; 171us; 173us; 176us; 178us; 180us; 182us; 185us; 187us; 189us; 191us; 193us; |]
let _fsyacc_action_rows = 88
let _fsyacc_actionTableElements = [|1us; 32768us; 42us; 5us; 0us; 49152us; 1us; 32768us; 31us; 9us; 2us; 32768us; 31us; 9us; 51us; 28us; 1us; 16385us; 51us; 28us; 1us; 32768us; 58us; 6us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 3us; 32768us; 20us; 11us; 54us; 20us; 60us; 24us; 0us; 16389us; 2us; 32768us; 54us; 20us; 60us; 24us; 2us; 32768us; 21us; 13us; 24us; 15us; 0us; 16390us; 0us; 16391us; 2us; 32768us; 54us; 20us; 60us; 24us; 0us; 16392us; 2us; 32768us; 26us; 22us; 54us; 20us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 1us; 32768us; 60us; 24us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 1us; 32768us; 58us; 29us; 1us; 32768us; 20us; 37us; 1us; 16403us; 18us; 52us; 0us; 16402us; 0us; 16404us; 2us; 16406us; 20us; 37us; 59us; 87us; 0us; 16405us; 0us; 16407us; 0us; 16408us; 3us; 32768us; 21us; 40us; 58us; 49us; 59us; 87us; 2us; 32768us; 21us; 39us; 23us; 42us; 0us; 16409us; 0us; 16410us; 0us; 16411us; 2us; 32768us; 58us; 49us; 59us; 87us; 0us; 16412us; 3us; 32768us; 23us; 50us; 28us; 45us; 59us; 87us; 1us; 32768us; 59us; 87us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 1us; 32768us; 58us; 51us; 0us; 16417us; 4us; 32768us; 19us; 55us; 54us; 75us; 58us; 69us; 60us; 24us; 2us; 32768us; 19us; 54us; 24us; 57us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 3us; 32768us; 54us; 75us; 58us; 69us; 60us; 24us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 2us; 16426us; 20us; 78us; 26us; 76us; 0us; 16427us; 0us; 16428us; 0us; 16429us; 0us; 16430us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 1us; 32768us; 26us; 72us; 1us; 32768us; 58us; 73us; 0us; 16434us; 0us; 16435us; 0us; 16436us; 1us; 32768us; 58us; 77us; 0us; 16437us; 4us; 32768us; 21us; 81us; 54us; 75us; 58us; 69us; 60us; 24us; 1us; 32768us; 21us; 80us; 0us; 16438us; 0us; 16439us; 1us; 16440us; 23us; 84us; 0us; 16441us; 3us; 32768us; 54us; 75us; 58us; 69us; 60us; 24us; 0us; 16442us; 0us; 16443us; 0us; 16444us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 8us; 10us; 12us; 13us; 14us; 15us; 19us; 20us; 23us; 26us; 27us; 28us; 31us; 32us; 35us; 36us; 37us; 38us; 39us; 41us; 42us; 43us; 44us; 45us; 46us; 48us; 50us; 52us; 53us; 54us; 57us; 58us; 59us; 60us; 64us; 67us; 68us; 69us; 70us; 73us; 74us; 78us; 80us; 81us; 82us; 83us; 84us; 86us; 87us; 92us; 95us; 96us; 97us; 98us; 102us; 103us; 104us; 105us; 106us; 107us; 110us; 111us; 112us; 113us; 114us; 115us; 116us; 117us; 119us; 121us; 122us; 123us; 124us; 126us; 127us; 132us; 134us; 135us; 136us; 138us; 139us; 143us; 144us; 145us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 3us; 2us; 1us; 2us; 2us; 4us; 1us; 3us; 2us; 1us; 1us; 1us; 3us; 1us; 1us; 2us; 1us; 4us; 3us; 1us; 2us; 1us; 1us; 1us; 3us; 2us; 1us; 3us; 3us; 2us; 1us; 1us; 3us; 3us; 2us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 2us; 3us; 2us; 1us; 1us; 3us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 8us; 8us; 9us; 10us; 10us; 11us; 12us; 12us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 17us; 17us; 18us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 27us; 27us; 28us; 28us; 29us; 29us; 30us; 31us; 32us; 33us; 34us; 34us; 35us; 36us; 36us; 37us; 38us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 65535us; 16386us; 16387us; 16388us; 65535us; 16389us; 65535us; 65535us; 16390us; 16391us; 65535us; 16392us; 65535us; 16393us; 16394us; 16395us; 16396us; 65535us; 16397us; 16398us; 16399us; 16400us; 16401us; 65535us; 65535us; 65535us; 16402us; 16404us; 65535us; 16405us; 16407us; 16408us; 65535us; 65535us; 16409us; 16410us; 16411us; 65535us; 16412us; 65535us; 65535us; 16413us; 16414us; 16415us; 16416us; 65535us; 16417us; 65535us; 65535us; 16418us; 16419us; 16420us; 65535us; 16421us; 16422us; 16423us; 16424us; 16425us; 65535us; 16427us; 16428us; 16429us; 16430us; 16431us; 16432us; 16433us; 65535us; 65535us; 16434us; 16435us; 16436us; 65535us; 16437us; 65535us; 65535us; 16438us; 16439us; 65535us; 16441us; 65535us; 16442us; 16443us; 16444us; |]
let _fsyacc_reductions ()  =    [| 
# 522 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : SourceFile)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startsource_file));
# 531 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'package_clause)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'import_decl_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'top_level_decl_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "GoParser.fsy"
                          
                             SourceFile (_1, _2, _3)
                         
                   )
# 31 "GoParser.fsy"
                 : SourceFile));
# 546 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "GoParser.fsy"
                          
                             _2
                         
                   )
# 40 "GoParser.fsy"
                 : 'package_clause));
# 559 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'import_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "GoParser.fsy"
                          
                             [| _1 |]
                         
                   )
# 46 "GoParser.fsy"
                 : 'import_decl_list));
# 572 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'import_decl_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'import_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "GoParser.fsy"
                          
                             _1 @ _2
                         
                   )
# 50 "GoParser.fsy"
                 : 'import_decl_list));
# 586 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'import_spec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "GoParser.fsy"
                          
                             [| _2 |]
                         
                   )
# 56 "GoParser.fsy"
                 : 'import_decl));
# 599 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'import_spec_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "GoParser.fsy"
                          
                             _3
                         
                   )
# 60 "GoParser.fsy"
                 : 'import_decl));
# 612 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'import_spec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "GoParser.fsy"
                                         [| _1 |] 
                   )
# 65 "GoParser.fsy"
                 : 'import_spec_list));
# 623 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'import_spec_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'import_spec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "GoParser.fsy"
                                                               _1 @ _3 
                   )
# 66 "GoParser.fsy"
                 : 'import_spec_list));
# 635 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'package_name_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'import_path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "GoParser.fsy"
                          
                             ImportSpec(_1, _2)
                         
                   )
# 70 "GoParser.fsy"
                 : 'import_spec));
# 649 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'import_path)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "GoParser.fsy"
                          
                             ImportSpec([||], _1)
                         
                   )
# 74 "GoParser.fsy"
                 : 'import_spec));
# 662 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "GoParser.fsy"
                                            _1 
                   )
# 79 "GoParser.fsy"
                 : 'import_path));
# 673 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'package_name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "GoParser.fsy"
                                          [| _1 |] 
                   )
# 82 "GoParser.fsy"
                 : 'package_name_list));
# 684 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'package_name_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'package_name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "GoParser.fsy"
                                                                _1 @ _3 
                   )
# 83 "GoParser.fsy"
                 : 'package_name_list));
# 696 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "GoParser.fsy"
                                                _1 
                   )
# 86 "GoParser.fsy"
                 : 'package_name));
# 707 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'top_level_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "GoParser.fsy"
                          
                             [| _1 |]
                         
                   )
# 90 "GoParser.fsy"
                 : 'top_level_decl_list));
# 720 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'top_level_decl_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'top_level_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "GoParser.fsy"
                          
                             _1 @ _2
                         
                   )
# 94 "GoParser.fsy"
                 : 'top_level_decl_list));
# 734 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'function_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "GoParser.fsy"
                                           _1 
                   )
# 100 "GoParser.fsy"
                 : 'top_level_decl));
# 745 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'function_signature)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'function_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "GoParser.fsy"
                          
                             FunctionDecl {
                                 Name = _2
                                 Signature = _3
                                 Body = Some _4
                             }
                         
                   )
# 105 "GoParser.fsy"
                 : 'function_decl));
# 764 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'function_signature)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "GoParser.fsy"
                          
                             FunctionDecl {
                                 Name = _2
                                 Signature = _3
                                 Body = None
                             }
                         
                   )
# 113 "GoParser.fsy"
                 : 'function_decl));
# 782 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "GoParser.fsy"
                                             _1 
                   )
# 121 "GoParser.fsy"
                 : 'function_body));
# 793 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameters)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'result)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "GoParser.fsy"
                          
                             { Parameters = _1
                               Result = Some _2
                             }
                         
                   )
# 127 "GoParser.fsy"
                 : 'function_signature));
# 809 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameters)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "GoParser.fsy"
                          
                             { Parameters = _1
                               Result = None
                             }
                         
                   )
# 133 "GoParser.fsy"
                 : 'function_signature));
# 824 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameters)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "GoParser.fsy"
                                        _1 
                   )
# 139 "GoParser.fsy"
                 : 'result));
# 835 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "GoParser.fsy"
                                  _1 
                   )
# 140 "GoParser.fsy"
                 : 'result));
# 846 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameter_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "GoParser.fsy"
                          
                             _2
                         
                   )
# 143 "GoParser.fsy"
                 : 'parameters));
# 859 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "GoParser.fsy"
                          
                             [||]
                         
                   )
# 147 "GoParser.fsy"
                 : 'parameters));
# 871 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameter_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "GoParser.fsy"
                                            [| _1 |] 
                   )
# 151 "GoParser.fsy"
                 : 'parameter_list));
# 882 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameter_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameter_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "GoParser.fsy"
                                                                 _1 @ _3 
                   )
# 152 "GoParser.fsy"
                 : 'parameter_list));
# 894 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'identifier_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "GoParser.fsy"
                                                              _3 
                   )
# 155 "GoParser.fsy"
                 : 'parameter_decl));
# 906 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'identifier_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "GoParser.fsy"
                                                  _2 
                   )
# 156 "GoParser.fsy"
                 : 'parameter_decl));
# 918 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "GoParser.fsy"
                                  _1 
                   )
# 157 "GoParser.fsy"
                 : 'parameter_decl));
# 929 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "GoParser.fsy"
                                        [| _1 |] 
                   )
# 160 "GoParser.fsy"
                 : 'identifier_list));
# 940 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'identifier_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "GoParser.fsy"
                                                              _1 @ _3 
                   )
# 161 "GoParser.fsy"
                 : 'identifier_list));
# 952 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "GoParser.fsy"
                          
                             { Statements = _2 }
                         
                   )
# 165 "GoParser.fsy"
                 : 'block));
# 965 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "GoParser.fsy"
                          
                             { Statements = [||] }
                         
                   )
# 169 "GoParser.fsy"
                 : 'block));
# 977 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "GoParser.fsy"
                          
                             [| _1 |]
                         
                   )
# 175 "GoParser.fsy"
                 : 'statement_list));
# 990 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "GoParser.fsy"
                          
                             _1 @ _3
                         
                   )
# 179 "GoParser.fsy"
                 : 'statement_list));
# 1004 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "GoParser.fsy"
                                         _1 
                   )
# 184 "GoParser.fsy"
                 : 'statement));
# 1015 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "GoParser.fsy"
                                             _1 
                   )
# 187 "GoParser.fsy"
                 : 'simple_stmt));
# 1026 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "GoParser.fsy"
                          
                             ExpressionStmt _1
                         
                   )
# 191 "GoParser.fsy"
                 : 'expression_stmt));
# 1039 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'unary_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "GoParser.fsy"
                                        _1 
                   )
# 196 "GoParser.fsy"
                 : 'expression));
# 1050 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'primary_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "GoParser.fsy"
                                          _1 
                   )
# 199 "GoParser.fsy"
                 : 'unary_expr));
# 1061 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'primary_expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "GoParser.fsy"
                          
                             CallExpr { Function = _1; Arguments = _2 }
                         
                   )
# 203 "GoParser.fsy"
                 : 'primary_expr));
# 1075 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'primary_expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'selector)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "GoParser.fsy"
                          
                             SelectorExpr { Parent = _1; Name = _2 }
                         
                   )
# 207 "GoParser.fsy"
                 : 'primary_expr));
# 1089 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'operand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "GoParser.fsy"
                          
                             _1
                         
                   )
# 211 "GoParser.fsy"
                 : 'primary_expr));
# 1102 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 216 "GoParser.fsy"
                                     _1 
                   )
# 216 "GoParser.fsy"
                 : 'operand));
# 1113 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'operand_name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "GoParser.fsy"
                                          _1 
                   )
# 217 "GoParser.fsy"
                 : 'operand));
# 1124 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "GoParser.fsy"
                          
                             VariableExpr { Name = _1; Package = None }
                         
                   )
# 221 "GoParser.fsy"
                 : 'operand_name));
# 1137 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'qualified_ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 224 "GoParser.fsy"
                                             _1 
                   )
# 224 "GoParser.fsy"
                 : 'operand_name));
# 1148 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'package_name)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "GoParser.fsy"
                          
                             VariableExpr { Name = _3; Some _1 }
                         
                   )
# 228 "GoParser.fsy"
                 : 'qualified_ident));
# 1162 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'basic_literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "GoParser.fsy"
                                           _1 
                   )
# 233 "GoParser.fsy"
                 : 'literal));
# 1173 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "GoParser.fsy"
                          
                             StringLit _1
                         
                   )
# 237 "GoParser.fsy"
                 : 'basic_literal));
# 1186 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 243 "GoParser.fsy"
                          
                             _2
                         
                   )
# 243 "GoParser.fsy"
                 : 'selector));
# 1199 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'inner_arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 249 "GoParser.fsy"
                          
                             _2
                         
                   )
# 249 "GoParser.fsy"
                 : 'arguments));
# 1212 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 253 "GoParser.fsy"
                          
                             [||]
                         
                   )
# 253 "GoParser.fsy"
                 : 'arguments));
# 1224 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "GoParser.fsy"
                                             _1 
                   )
# 259 "GoParser.fsy"
                 : 'inner_arguments));
# 1235 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 264 "GoParser.fsy"
                          
                             [| _1 |]
                         
                   )
# 264 "GoParser.fsy"
                 : 'expression_list));
# 1248 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 268 "GoParser.fsy"
                          
                             _1 @ _3
                         
                   )
# 268 "GoParser.fsy"
                 : 'expression_list));
# 1262 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'type_name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 273 "GoParser.fsy"
                                       _1 
                   )
# 273 "GoParser.fsy"
                 : 'type));
# 1273 "GoParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 276 "GoParser.fsy"
                                             _1 
                   )
# 276 "GoParser.fsy"
                 : 'type_name));
|]
# 1285 "GoParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 64;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let source_file lexer lexbuf : SourceFile =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
