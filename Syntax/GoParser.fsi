// Signature file for parser generated by fsyacc
module Gone.GoParser
type token = 
  | EOF
  | MUL
  | DIV
  | PLUS
  | MINUS
  | LT
  | GT
  | LTEQ
  | GTEQ
  | EQEQ
  | NEQ
  | OR
  | AND
  | BANG
  | QUESTION
  | HASH
  | PERCENT
  | LBRACKET
  | RBRACKET
  | LCURLY
  | RCURLY
  | LPAREN
  | RPAREN
  | EQ
  | COMMA
  | SEMI
  | COLON
  | DOT
  | OP_PLUSEQ
  | OP_ELLIPSIS
  | CONTINUE
  | FOR
  | IMPORT
  | RETURN
  | VAR
  | CONST
  | FALLTHROUGH
  | IF
  | RANGE
  | TYPE
  | CHAN
  | ELSE
  | GOTO
  | PACKAGE
  | SWITCH
  | CASE
  | DEFER
  | GO
  | MAP
  | STRUCT
  | BREAK
  | DEFAULT
  | FUNC
  | INTERFACE
  | SELECT
  | STRING_LITERAL of (string)
  | RUNE_LITERAL of (char)
  | FLOATING_LITERAL of (float)
  | INTEGER_LITERAL of (int)
  | IDENTIFIER of (string)
  | TYPE_IDENTIFIER of (string)
  | PACKAGE_IDENTIFIER of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LTEQ
    | TOKEN_GTEQ
    | TOKEN_EQEQ
    | TOKEN_NEQ
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_BANG
    | TOKEN_QUESTION
    | TOKEN_HASH
    | TOKEN_PERCENT
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_EQ
    | TOKEN_COMMA
    | TOKEN_SEMI
    | TOKEN_COLON
    | TOKEN_DOT
    | TOKEN_OP_PLUSEQ
    | TOKEN_OP_ELLIPSIS
    | TOKEN_CONTINUE
    | TOKEN_FOR
    | TOKEN_IMPORT
    | TOKEN_RETURN
    | TOKEN_VAR
    | TOKEN_CONST
    | TOKEN_FALLTHROUGH
    | TOKEN_IF
    | TOKEN_RANGE
    | TOKEN_TYPE
    | TOKEN_CHAN
    | TOKEN_ELSE
    | TOKEN_GOTO
    | TOKEN_PACKAGE
    | TOKEN_SWITCH
    | TOKEN_CASE
    | TOKEN_DEFER
    | TOKEN_GO
    | TOKEN_MAP
    | TOKEN_STRUCT
    | TOKEN_BREAK
    | TOKEN_DEFAULT
    | TOKEN_FUNC
    | TOKEN_INTERFACE
    | TOKEN_SELECT
    | TOKEN_STRING_LITERAL
    | TOKEN_RUNE_LITERAL
    | TOKEN_FLOATING_LITERAL
    | TOKEN_INTEGER_LITERAL
    | TOKEN_IDENTIFIER
    | TOKEN_TYPE_IDENTIFIER
    | TOKEN_PACKAGE_IDENTIFIER
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startsource_file
    | NONTERM_source_file
    | NONTERM_package_clause
    | NONTERM_import_decl_list
    | NONTERM_import_decl
    | NONTERM_import_spec_list
    | NONTERM_import_spec
    | NONTERM_import_path
    | NONTERM_package_name_list
    | NONTERM_package_name
    | NONTERM_top_level_decl_list
    | NONTERM_top_level_decl
    | NONTERM_function_decl
    | NONTERM_function_body
    | NONTERM_function_signature
    | NONTERM_function_result
    | NONTERM_parameters
    | NONTERM_parameter_list
    | NONTERM_parameter_decl
    | NONTERM_identifier_list
    | NONTERM_block
    | NONTERM_statement_list
    | NONTERM_statement
    | NONTERM_simple_stmt
    | NONTERM_expression_stmt
    | NONTERM_expression
    | NONTERM_unary_expr
    | NONTERM_primary_expr
    | NONTERM_operand
    | NONTERM_operand_name
    | NONTERM_qualified_ident
    | NONTERM_literal
    | NONTERM_basic_literal
    | NONTERM_selector
    | NONTERM_arguments
    | NONTERM_inner_arguments
    | NONTERM_expression_list
    | NONTERM_gotype
    | NONTERM_type_name
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val source_file : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (SourceFile) 
