%{

using System;
using Gone.Syntax;
using Microsoft.FSharp.Core;

#nullable disable

namespace Gone.Parser
{
	/// <summary>
	///    The Go Parser
	///    https://golang.org/ref/spec#Pointer_types
	/// </summary>
	public partial class GoParser
	{

		
%}

%token IDENTIFIER TYPE_IDENTIFIER PACKAGE_IDENTIFIER
%token INTEGER_LITERAL FLOATING_LITERAL RUNE_LITERAL STRING_LITERAL

%token BREAK        DEFAULT      FUNC         INTERFACE    SELECT
%token CASE         DEFER        GO           MAP          STRUCT
%token CHAN         ELSE         GOTO         PACKAGE      SWITCH
%token CONST        FALLTHROUGH  IF           RANGE        TYPE
%token CONTINUE     FOR          IMPORT       RETURN       VAR

%token OP_PLUSEQ OP_ELLIPSIS



%start source_file
%%

source_file
    : package_clause import_decl_list top_level_decl_list
    {
        $$ = new SourceFile ((string)$1, ToArray<ImportSpec[]>($2), ToArray<TopLevelDecl>($3));
    }
    | package_clause import_decl_list
    | package_clause top_level_decl_list
    | package_clause
    ;

package_clause
    : PACKAGE IDENTIFIER
    {
        $$ = $2;
    }
    ;

import_decl_list
    : import_decl
    {
        $$ = NewList<ImportSpec[]> ($1);
    }
    | import_decl_list import_decl
    {
        $$ = AppendList<ImportSpec[]> ($1, $2);
    }
    ;

import_decl
    : IMPORT import_spec
    {
        $$ = new[] { (ImportSpec)$2 };
    }
    | IMPORT '(' import_spec_list ')'
    ;

import_spec_list
    : import_spec
    | import_spec_list ';' import_spec
    ;

import_spec
    : package_name_list import_path
    | import_path
    {
        $$ = new ImportSpec(Array.Empty<string>(), (string)$1);
    }
    ;

import_path
    : STRING_LITERAL
    ;

package_name_list
    : package_name
    | package_name_list '.' package_name
    ;

package_name
    : PACKAGE_IDENTIFIER
    ;

top_level_decl_list
    : top_level_decl
    {
        $$ = NewList<TopLevelDecl> ($1);
    }
    | top_level_decl_list top_level_decl
    {
        $$ = AppendList<TopLevelDecl> ($1, $2);
    }
    ;

top_level_decl
    //: declaration
    : function_decl
    //| method_decl
    ;

function_decl
    : FUNC IDENTIFIER function_signature function_body
    {
        $$ = TopLevelDecl.NewFunctionDecl (new FunctionDeclData (
            (string)$2, (FunctionSignature)$3,
            FSharpOption<BlockData>.Some ((BlockData)$4)));
    }
    | FUNC IDENTIFIER function_signature
    ;

function_body : block ;

//function_type   : FUNC function_signature ;
function_signature
    : parameters result
    {
        $$ = new FunctionSignature(ToArray<Parameter>($1),
            FSharpOption<FunctionResult>.Some ((FunctionResult)$2));
    }
    | parameters
    {
        $$ = new FunctionSignature(ToArray<Parameter>($1),
            FSharpOption<FunctionResult>.None);
    }
    ;
result
    : parameters
    | type
    ;
parameters
    : '('  parameter_list ')'
    {
        $$ = $2;
    }
    | '(' ')'
    {
        $$ = EmptyList<Parameter> ();
    }
    ;
parameter_list
    : parameter_decl
    | parameter_list ',' parameter_decl
    ;

parameter_decl
    : identifier_list OP_ELLIPSIS type
    | identifier_list type
    | type
    ;

identifier_list
    : IDENTIFIER
    | identifier_list ',' IDENTIFIER
    ;

block
    : '{' statement_list '}'
    {
        $$ = new BlockData (ToArray<Statement> ($2));
    }
    | '{' '}'
    {
        $$ = BlockData.Empty;
    }
    ;

statement_list
    : statement
    {
        $$ = NewList<Statement> ($1);
    }
    | statement_list ';' statement
    {
        $$ = AppendList<Statement> ($1, $3);
    }
    ;

statement
    : simple_stmt
    ;

simple_stmt
    : expression_stmt    
    ;

expression_stmt
    : expression
    {
        $$ = Statement.NewExpressionStmt ((Expression)$1);
    }
    ;

expression
    : unary_expr
    ;

unary_expr
    : primary_expr
    ;

primary_expr
    : primary_expr arguments
    {
        $$ = Expression.NewCallExpr(new CallData((Expression)$1, ToArray<Expression>($2)));
    }
    | primary_expr selector
    {
        $$ = Expression.NewSelectorExpr(new SelectorData((Expression)$1, (string)($2)));
    }
    | operand
    ;

operand
    : literal
    | operand_name
    ;

operand_name
    : IDENTIFIER
    {
        $$ = Expression.NewVariableExpr (new VariableData ((string)$1,
            FSharpOption<string>.None));
    }
    | qualified_ident
    ;

qualified_ident
    : package_name '.' IDENTIFIER
    {
        $$ = Expression.NewVariableExpr (new VariableData ((string)$3,
            FSharpOption<string>.Some((string)$1)));
    }
    ;

literal
    : basic_literal
    ;

basic_literal
    : STRING_LITERAL
    {
        $$ = Expression.NewStringLit ((string)$1);
    }
    ;

selector
    : '.' IDENTIFIER
    {
        $$ = $2;
    }
    ;

arguments
    : '(' inner_arguments ')'
    {
        $$ = $2;
    }
    | '(' ')'
    {
        $$ = EmptyList<Expression> ();
    }
    ;

// ( ExpressionList | Type [ "," ExpressionList ] ) [ "..." ] [ "," ]
inner_arguments
    : expression_list
    //: [ ( ExpressionList | Type [ "," ExpressionList ] ) [ "..." ] [ "," ] ]
    ;

expression_list
    : expression
    {
        $$ = NewList<Expression> ($1);
    }
    | expression_list ',' expression
    {
        $$ = AppendList<Expression> ($1, $3);
    }
    ;

type
    : type_name
    ;

type_name
    : TYPE_IDENTIFIER
    ;

















%%


}



